ken.lay.node
ken.lay.node
which(ken.lay.node)
which(V(org.charts[[2]])$name=="Kenneth Lay")-1)
which(V(org.charts[[2]])$name=="Kenneth Lay")-1
which(V(orgGraph)$name=="Kenneth Lay")-1
which(V(orgGraph)$name=="Kenneth Lay")
which(V(orgGraph)$name=="Kenneth Lay")-1
V(orgGraph)
V(orgGraph)[1]
atributes(V(orgGraph)[1])
attributes(V(orgGraph)[1])
ecount
help(ecount)
vid
ecount(orgGraph)
el
head(el)
E(orgGraph)
E(orgGraph)$count
E(orgGraph)
E(orgGraph)$color
E(orgGraph)$weight <- el$count
el$count
el
E(orgGraph)
length(E(orgGraph))
reportsTo
el
head(reportsTo)
el[reportsTo$id,]
el[reportsTo$id,"count"]
E(orgGraph)$weight
E(g)
E(orgGraph)
E(orgGraph)$weight
plot(E(orgGraph)$weight)
hist(E(orgGraph)$weight)
hist(log(E(orgGraph)$weight))
max(log(E(orgGraph)$weight))
c(1,1) == 5
grey
get.edgelist(orgGraph)
igraph.add.edges
add.edges(orGraph, invOrgGraph)
add.edges(orgGraph, invOrgGraph)
add.edges(orgGraph, get.edgelistinvOrgGraph))
add.edges(orgGraph, get.edgelistinvOrgGraph)
add.edges(orgGraph, get.edgelist(invOrgGraph))
add.edges(orgGraph, get.edgelist(sapply(reportsTo, as.character)))
add.edges(orgGraph, graph.edgelist(sapply(reportsTo, as.character)))
V(el)
V(orgGraph)
V(orgGraph)["1"]
V(orgGraph)["2"]
V(orgGraph)["3"]
V(orgGraph)["4"]
V(orgGraph)["1234"]
V(orgGraph)["123"]
unlevel(V(orgGraph)["3"])
unlevel(V(orgGraph))
level(V(orgGraph))
V(orgGraph)
V(orgGraph)[1]
V(orgGraph)["1"]
V(orgGraph)["67"]
help(V)
names(V(orgGraph))
V(orgGraph)["0"]
V(orgGraph)[0]
V(orgGraph)[1]
V(orgGraph)[2]
V(orgGraph)["67"]
V(orgGraph) == "67"
V(orgGraph)["67"]$index
V(orgGraph)["67"]$value
list.graph.attributes(orgGraph)
list.vertex.attributes(orgGraph)
V(orgGraph)["67"]$name
V(orgGraph)$name
V(orgGraph)$name == "1"
which(V(orgGraph)$name == "1")
which(V(orgGraph)$name == el$id)
which(V(orgGraph)$name == )
el$id
head(el)
el
a <- el
dim(a) <- NULL
a
el
el
el
el
el
el
summary(orgGraph)
E(orgGraph)
E(orgGraph)
orgGraph
graph.edgelist(orgGraph)
get.edgelist(orgGraph)
get.edgelist(orgGraph)[1]
get.edgelist(orgGraph)[,1]
el
reportsTo
el
get.edgelist(orgGraph)
apply(get.edgelist(orgGraph), FUN=function(c(x[1], x[2]), MARGIN=1)
apply(get.edgelist(orgGraph), FUN=function(c(x[1], x[2])), MARGIN=1))
apply(get.edgelist(orgGraph), FUN=function(x){(c(x[1], x[2]))}, MARGIN=1))
apply(get.edgelist(orgGraph), FUN=function(x){(c(x[1], x[2])}, MARGIN=1))
apply(get.edgelist(orgGraph), 1, function(x){c(x[1], x[2])})
apply(get.edgelist(orgGraph), 2, function(x){c(x[1], x[2])})
apply(get.edgelist(orgGraph), 2, function(x){el[el$id==x[1] & el, x[2])})
head(el)
apply(get.edgelist(orgGraph), 2, function(x){el[el$fromIid==x[1] & el$toId==x[2]),"count"})
apply(get.edgelist(orgGraph), 2, function(x){el[el$fromIid==x[1] & el$toId==x[2]),"count"]})
apply(get.edgelist(orgGraph), 2, function(x){el[el$fromIid==x[1] & el$toId==x[2],"count"]})
apply(get.edgelist(orgGraph), 2, function(x){el[el$fromIid==x[1] & el$toId==x[2],]})
apply(get.edgelist(orgGraph), FUN=function(c(x[1], x[2])), MARGIN=1))
apply(get.edgelist(orgGraph), 2, function(x){c(x[1], x[2])})
apply(get.edgelist(orgGraph), 1, function(x){c(x[1], x[2])})
apply(get.edgelist(orgGraph), 1, function(x){el[el$fromIid==x[1] & el$toId==x[2],]})
apply(get.edgelist(orgGraph), 2, function(x){c(x[,1], x[,2])})
apply(get.edgelist(orgGraph), 1, function(x){c(x[,1], x[,2])})
apply(get.edgelist(orgGraph), 1, function(x){dim(x))
)
apply(get.edgelist(orgGraph), 1, function(x){dim(x)})
apply(get.edgelist(orgGraph), 2, function(x){dim(x)})
class(get.edgelist(orgGraph))
apply(get.edgelist(orgGraph), 2, function(x){length(x)})
apply(get.edgelist(orgGraph), 1, function(x){length(x)})
apply(get.edgelist(orgGraph), 1, function(x){c(x[1], x[2])})
apply(get.edgelist(orgGraph), 1, function(x){el$toId==x[1] & el$fromId[2]})
apply(get.edgelist(orgGraph), 1, function(x){which(el$toId==x[1] & el$fromId[2])})
get.edgelist(orgGraph, names=TRUE)
apply(get.edgelist(orgGraph, names=TRUE), 1, function(x){which(el$toId==x[1] & el$fromId[2])})
apply(get.edgelist(orgGraph,names=TRUE), 1, function(x){c(x[1], x[2])})
apply(get.edgelist(orgGraph,names=FALSE), 1, function(x){c(x[1], x[2])})
apply(get.edgelist(orgGraph,names=TRUE), 1, function(x){c(x[1], x[2])})
apply(get.edgelist(orgGraph, names=TRUE), 1, function(x){which(el$toId==x[1] & el$fromId[2])})
el[365,]
el[482,]
el[678,]
apply(get.edgelist(orgGraph, names=TRUE), 1, function(x){el[el$toId==x[1] & el$fromId[2],]})
sapply(get.edgelist(orgGraph, names=TRUE), 1, function(x){el[el$toId==x[1] & el$fromId[2],]})
unlist(apply(get.edgelist(orgGraph, names=TRUE), 1, function(x){el[el$toId==x[1] & el$fromId[2],]}))
apply(get.edgelist(orgGraph, names=TRUE), 1, function(x){el[el$toId==x[1] & el$fromId[2],]})
apply(get.edgelist(orgGraph, names=TRUE), 1, function(x){el[el$fromId==x[1] & el$toId[2],]})
apply(get.vector(orgGraph, names=TRUE), 1, function(x){el[el$fromId==x[1] & el$toId[2],]})
get.vectorlist(orgGraph)
head(el)
plot(emailGraph)
head(el)
plot(emailGraph)
help(E)
E(emailGraph)["1"--"67"]
E(emailGraph)[P=c(1,67)]
E(emailGraph)[P=c("1","67")]
E(emailGraph, P = c("1", "67")
]
E(emailGraph, P = c("1", "67"))
E(emailGraph)
V(emailGraph)
E(emailGraph, P = c(156, 143))
E(emailGraph, P = c("156", "143"))
E(emailGraph)
E(emailGraph, P = c(156, 143))
E(emailGraph, P = c(156, 143),directed=TRUE)
d <- get.diamter(orgGraph)
d <- get.diameter(orgGraph)
d
class(d)
E(emailGraph, P = c(24, 25),directed=TRUE)
E(emailGraph, P = c(4, 26),directed=TRUE)
E(emailGraph, P = c("4", "26"),directed=TRUE)
V(emailGraph)
V(emailGraph)$name
cbind(V(emailGraph)$name, 1:length(V(emailGraph)))
data.frame(c(V(emailGraph)$name, 1:length(V(emailGraph))))
data.frame(cbind(V(emailGraph)$name, 1:length(V(emailGraph))))
help(which)
match(V(emailGraph)$name, V(emailGraph)$name)
E(emailGraph, P = c(match("4", V(emailGraph$name)), match("26", V(emailGraph)$name)),directed=TRUE)
E(emailGraph, P = c(match("4", V(emailGraph)$name), match("26", V(emailGraph)$name)),directed=TRUE)
E(emailGraph, P = c(match("4", V(emailGraph)$name), match("26", V(emailGraph)$name)),directed=TRUE)
E(emailGraph)
E(emailGraph, P = c(match("156", V(emailGraph)$name), match("143", V(emailGraph)$name)),directed=TRUE)
match("156", V(emailGraph)$name)
match("143", V(emailGraph)$name)
E(emailGraph, P = c(18,69))
E(emailGraph, P = c(18-1,69-1))
E(emailGraph, P = c(vertexIndex("156", emailGraph), vertexIndex("143", emailGraph))
)
E(emailGraph, P = c(vertexIndex("156", emailGraph), vertexIndex("143", emailGraph))
)
vertexIndex("156", emailGraph)
match("156", v(emailGraph)$name)
match("156", V(emailGraph)$name)
match("156", V(emailGraph)$name)-1
vertexIndex("156", emailGraph)
E(emailGraph, P = c(vertexIndex("156", emailGraph), vertexIndex("143", emailGraph))
)
plot(E(emailGraph, P = c(vertexIndex("156", emailGraph), vertexIndex("143", emailGraph)))
)
apply(reportsTo, MARGIN=1, as.character)
E(emailGraph, P = c(vertexIndex("156", emailGraph), vertexIndex("143", emailGraph))
)
vertexIndex("156", emailGraph)
E(vertexIndex)
e(emailGraph)
E(emailGraph)
vertexIndex("156", emailGraph)
vertexIndex("140", emailGraph)
vertexIndex("143", emailGraph)
E(emailGraph, c(17, 84))
E(emailGraph, c(17, 84, 17, 68))
plot(E(emailGraph, c(17, 84, 17, 68)))
reportsTo
as.character(reportsTo)
dim(reportsTo) <- NULL
reportsTo
reportsTo.flat <- matrix(reportsTo)
dim(reportsTo.flat) <- NULL
reportsTo.flat
as.matrix(reportsTo)
reportsTo <- as.matrix(reportsTo)
dim(reportsTo) <- NULL
reportsTo
reportsTo
reportsTo.flat
vertexIndex(as.character(reportsTo.flat, emailGraph))
vertexIndex(as.character(reportsTo.flat), emailGraph))
vertexIndex(as.character(reportsTo.flat), emailGraph)
unlist(reportsTo)
vertexIndex(as.character(reportsTo), Graph)
vertexIndex(as.character(reportsTo), emailGraph)
apply(reportsTo, MARGIN=1, function(x){vertexIndex(as.character(x), emailGraph)})
apply(reportsTo, MARGIN=2, function(x){vertexIndex(as.character(x), emailGraph)})
emailGraph
el$count
emailGraph <- graph.edgelist(apply(el[,c("fromId", "toId")],
+                                    MARGIN=2,
+                                    function(x){
+                                      vertexIndex(as.character(x),
+                                                  emailGraph)
+                                    })
+                              )
emailGraph <- graph.edgelist(apply(el[,c("fromId", "toId")],
                                    MARGIN=2,
                                    function(x){
                                      vertexIndex(as.character(x),
                                                  emailGraph)
                                    })
                              )
E(emailGraph)
help(igraph.plotting)
1
